import numpy as np
import pandas as pd 
import sklearn

credits = pd.read_csv("tmdb_5000_credits.csv")

movies = pd.read_csv("tmdb_5000_movies.csv")

credits.head()

movies.head()

print("Credits:", credits.shape)
print("Movies Dataframe:", movies.shape)

credits_column_renamed = credits.rename(index=str, columns={"movie_id": "id"})
movies_merge = movies.merge(credits_column_renamed, on = "id")
movies_merge.head()

movies_cleaned = movies_merge.drop(columns = ['homepage', 'title_x', 'title_y', 'status', 'production_countries'])
movies_cleaned.head()

movies_cleaned.info()

movies_cleaned.head(1)['overview']

from sklearn.feature_extraction.text import TfidfVectorizer

tfv = TfidfVectorizer(min_df = 3, max_features = None, 
                    strip_accents = 'unicode', analyzer = 'word', token_pattern = r'\w{1,}', 
                    ngram_range=(1,3),
                    stop_words = 'english')

movies_cleaned['overview'] = movies_cleaned['overview'].fillna('')

tfv_matrix = tfv.fit_transform(movies_cleaned['overview'])

tfv_matrix

tfv_matrix.shape

from sklearn.metrics.pairwise import sigmoid_kernel
sig =  sigmoid_kernel(tfv_matrix, tfv_matrix)

sig[0]

indices = pd.Series(movies_cleaned.index, index=movies_cleaned['original_title']).drop_duplicates()

indices

indices['Newlyweds']

sig[4799]

list(enumerate(sig[indices['Newlyweds']]))

sorted(list(enumerate(sig[indices['Newlyweds']])), key=lambda x: x[1], reverse = True)

def give_rec(title, sig = sig):
    idx = indices[title]
    sig_scores = list(enumerate(sig[idx]))
    sig_scores = sorted(sig_scores, key= lambda x: x[1], reverse = True)
    sig_scores = sig_scores[1:11]
    movie_indices = [i[0] for i in sig_scores]
    return movies_cleaned['original_title'].iloc[movie_indices]
                       

give_rec('Avatar')

